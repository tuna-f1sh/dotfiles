#!/usr/bin/env bash

if [[ $OSTYPE =~ "darwin" ]]; then
  function ff { osascript -e 'tell application "Finder"'\
   -e "if (${1-1} <= (count Finder windows)) then"\
    -e "get POSIX path of (target of window ${1-1} as alias)"\
     -e 'else' -e 'get POSIX path of (desktop as alias)'\
      -e 'end if' -e 'end tell'; };

  function cdff { cd "`ff $@`"; };
fi

# Codi
# Usage: codi [filetype] [filename]
codi() {
  local syntax="${1:-python}"
  shift
  $EDITOR -c \
    "let g:startify_disable_at_vimenter = 1 |\
    set bt=nofile ls=0 noru nonu nornu |\
    hi ColorColumn ctermbg=NONE |\
    hi VertSplit ctermbg=NONE |\
    hi NonText ctermfg=0 |\
    Codi $syntax" "$@"
}

# FZF
#==================

# Use fd and fzf to get the args to a command.
# Works only with zsh
# Examples:
# f mv # To move files. You can write the destination after selecting the files.
# f 'echo Selected:'
# f 'echo Selected music:' --extention mp3
# fm rm # To rm files in current directory
fz() {
    sels=( "${(@f)$(fd "${fd_default[@]}" "${@:2}"| fzf)}" )
    test -n "$sels" && print -z -- "$1 ${sels[@]:q:q}"
}

fzjq() {
  jq -rc paths $1 | fzf-tmux --preview 'x={}; jq "getpath($x)" $1'
}

# tm - create new tmux session, or switch to existing one. Works from within tmux too. (@bag-man)
# `tm` will allow you to select your tmux session via fzf.
# `tm irc` will attach to the irc session (if it exists), else it will create it.

tm() {
  [[ -n "$TMUX" ]] && change="switch-client" || change="attach-session"
  if [ $1 ]; then
    tmux $change -t "$1" 2>/dev/null || (tmux new-session -d -s $1 && tmux $change -t "$1"); return
  fi
  session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --exit-0) &&  tmux $change -t "$session" || echo "No sessions found."
}

# ftpane - switch pane (@george-b)
ftpane() {
  local panes current_window current_pane target target_window target_pane
  panes=$(tmux list-panes -s -F '#I:#P - #{pane_current_path} #{pane_current_command}')
  current_pane=$(tmux display-message -p '#I:#P')
  current_window=$(tmux display-message -p '#I')

  target=$(echo "$panes" | grep -v "$current_pane" | fzf +m --reverse) || return

  target_window=$(echo $target | awk 'BEGIN{FS=":|-"} {print$1}')
  target_pane=$(echo $target | awk 'BEGIN{FS=":|-"} {print$2}' | cut -c 1)

  if [[ $current_window -eq $target_window ]]; then
    tmux select-pane -t ${target_window}.${target_pane}
  else
    tmux select-pane -t ${target_window}.${target_pane} &&
    tmux select-window -t $target_window
  fi
}

# fze [FUZZY PATTERN] - Open the selected file with the default editor
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
fze() {
  local files
  IFS=$'\n' files=($(fzf-tmux --query="$1" --multi --select-1 --exit-0 --preview 'head -n 100 {}'))
  [[ -n "$files" ]] && ${EDITOR:-vim} "${files[@]}"
}

# Modified version where you can press
#   - CTRL-O to open with `open` command,
#   - CTRL-E or Enter key to open with the $EDITOR
fzo() {
  local out file key
  IFS=$'\n' out=($(fzf-tmux --query="$1" --exit-0 --expect=ctrl-o,ctrl-e))
  key=$(head -1 <<< "$out")
  file=$(head -2 <<< "$out" | tail -1)
  if [ -n "$file" ]; then
    [ "$key" = ctrl-o ] && open "$file" || ${EDITOR:-vim} "$file"
  fi
}

# fzd - cd to selected directory
fzd() {
  local dir
  dir=$(find ${1:-.} -path '*/\.*' -prune \
                  -o -type d -print 2> /dev/null | fzf +m) &&
  cd "$dir"
}

# fh - repeat history
fzh() {
  print -z $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed 's/ *[0-9]* *//')
}

is_in_git_repo() {
  git rev-parse HEAD > /dev/null 2>&1
}

fzf-down() {
  fzf --height 50% --min-height 20 --border --bind ctrl-/:toggle-preview "$@"
}

# status of files
fzgf() {
  is_in_git_repo || return
  git -c color.status=always status --short |
  fzf-down -m --ansi --nth 2..,.. \
    --preview '(git diff --color=always -- {-1} | sed 1,4d; cat {-1})' |
  cut -c4- | sed 's/.* -> //'
}

# branch info
fzgb() {
  is_in_git_repo || return
  git branch -a --color=always | grep -v '/HEAD\s' | sort |
  fzf-down --ansi --multi --tac --preview-window right:70% \
    --preview 'git log --oneline --graph --date=short --color=always --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1)' |
  sed 's/^..//' | cut -d' ' -f1 |
  sed 's#^remotes/##'
}

# tags
fzgt() {
  is_in_git_repo || return
  git tag --sort -version:refname |
  fzf-down --multi --preview-window right:70% \
    --preview 'git show --color=always {}'
}

# history
fzgh() {
  is_in_git_repo || return
  git log --date=short --format="%C(green)%C(bold)%cd %C(auto)%h%d %s (%an)" --graph --color=always |
  fzf-down --ansi --no-sort --reverse --multi --bind 'ctrl-s:toggle-sort' \
    --header 'Press CTRL-S to toggle sort' \
    --preview 'grep -o "[a-f0-9]\{7,\}" <<< {} | xargs git show --color=always' |
  grep -o "[a-f0-9]\{7,\}"
}

# remote branches
fzgr() {
  is_in_git_repo || return
  git remote -v | awk '{print $1 "\t" $2}' | uniq |
  fzf-down --tac \
    --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" {1}' |
  cut -d$'\t' -f1
}

# stash list
fzgs() {
  is_in_git_repo || return
  git stash list | fzf-down --reverse -d: --preview 'git show --color=always {1}' |
  cut -d: -f1
}

# fstash - easier way to deal with stashes
# type fstash to get a list of your stashes
# enter shows you the contents of the stash
# ctrl-d shows a diff of the stash against your current HEAD
# ctrl-b checks the stash out as a branch, for easier merging
fzstash() {
  local out q k sha
  while out=$(
    git stash list --pretty="%C(yellow)%h %>(14)%Cgreen%cr %C(blue)%gs" |
    fzf --ansi --no-sort --query="$q" --print-query \
        --expect=ctrl-d,ctrl-b);
  do
    mapfile -t out <<< "$out"
    q="${out[0]}"
    k="${out[1]}"
    sha="${out[-1]}"
    sha="${sha%% *}"
    [[ -z "$sha" ]] && continue
    if [[ "$k" == 'ctrl-d' ]]; then
      git diff $sha
    elif [[ "$k" == 'ctrl-b' ]]; then
      git stash branch "stash-$sha" $sha
      break;
    else
      git stash show -p $sha
    fi
  done
}

# cdf - cd into the directory of the selected file
cdf() {
   local file
   local dir
   file=$(fzf +m -q "$1") && dir=$(dirname "$file") && cd "$dir"
}

# Ag for term to edit in nvim with preview
agvim() {
  local file
  local line

  read -r file line <<<"$(ag --nobreak --noheading $@ | fzf -0 -1 | awk -F: '{print $1, $2}')"

  if [[ -n $file ]]
  then
     $EDITOR $file +$line
  fi
}

# fkill - kill process
fkill() {
  local pid
  pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')

  if [ "x$pid" != "x" ]
  then
    echo $pid | xargs kill -${1:-9}
  fi
}

fzpdf () {
    local open
    open=open   # on OSX, "open" opens a pdf in preview
    fd -e pdf \
    | fast-p \
    | fzf --read0 --reverse -e -d $'\t'  \
        --preview-window down:80% --preview '
            v=$(echo {q} | gtr " " "|");
            echo -e {1}"\n"{2} | ggrep -E "^|$v" -i --color=always;
        ' \
    | gcut -z -f 1 -d $'\t' | gtr -d '\n' | gxargs -r --null $open > /dev/null 2> /dev/null
}

# Note taking function and command completion
_n() {
  local lis cur
  lis=$(fd . "${NOTE_DIR}" -e md | \
    sed -e "s|${NOTE_DIR}/||" | \
    sed -e 's/\.md$//')
  cur=${COMP_WORDS[COMP_CWORD]}
  COMPREPLY=( $(compgen -W "$lis" -- "$cur") )
}
note() {
  : "${NOTE_DIR:?'NOTE_DIR ENV Var not set'}"
  if [ $# -eq 0 ]; then
    local file
    file=$(fd . "${NOTE_DIR}" -e md --exclude 'archive' --exec-batch ls -t {} | \
      sed -e "s|${NOTE_DIR}/||" | \
      sed -e 's/\.md$//' | \
      fzf \
        --multi \
        --select-1 \
        --exit-0 \
        --preview="bat --color=always ${NOTE_DIR}/{}.md" \
        --preview-window=right:80%:wrap)
    [[ -n $file ]] && \
      ${EDITOR:-vim} + "${NOTE_DIR}/${file}.md"
  else
    case "$1" in 
      "-d")
        local file
        file=$(fd . "${NOTE_DIR}" -e md --exec-batch ls -t {} | \
          sed -e "s|${NOTE_DIR}/||" | \
          sed -e 's/\.md$//' | \
          fzf \
            --multi \
            --select-1 \
            --exit-0 \
            --preview="bat --color=always ${NOTE_DIR}/{}.md" \
            --preview-window=right:80%:wrap)
        [[ -n $file ]] && \
          echo "! Deleteing ${file}.md"
          trash -v "${NOTE_DIR}/${file}.md"
        ;;
      "-w")
        ${EDITOR:-vim} + "${NOTE_DIR}/w-$2.md"
        ;;
      "-wa")
        local file="w-$(date +%Y-%m-%d)"
        if [ -e "${NOTE_DIR}/$file.md" ]; then
          echo "\n## $(date +%H:%M:%S)" >> "${NOTE_DIR}/${file}.md"
        # else
        #   echo "## $(date +%H:%M:%S)" >> "${NOTE_DIR}/${file}.md"
        fi
        if [ -p "/dev/stdin" ]; then
          >> "${NOTE_DIR}/${file}.md"
        elif [ -n "$2" ]; then
          echo "$2" >> "${NOTE_DIR}/${file}.md"
        else
          ${EDITOR:-vim} + "${NOTE_DIR}/${file}.md"
        fi
        ;;
      "-cd")
        cd "${NOTE_DIR}"
        ;;
      "-a")
        local file="$(date +%Y-%m-%d)"
        if [ -e "${NOTE_DIR}/$file.md" ]; then
          echo "\n## $(date +%H:%M:%S)" >> "${NOTE_DIR}/${file}.md"
        # else
        #   echo "## $(date +%H:%M:%S)" >> "${NOTE_DIR}/${file}.md"
        fi
        if [ -p "/dev/stdin" ]; then
          >> "${NOTE_DIR}/${file}.md"
        elif [ -n "$2" ]; then
          echo "$2" >> "${NOTE_DIR}/${file}.md"
        else
          ${EDITOR:-vim} + "${NOTE_DIR}/${file}.md"
        fi
        ;;
      "-j")
        local file="journal-$(date +%Y).md"
        echo "\n## $(date +%c)" >> "${NOTE_DIR}/${file}"
        ${EDITOR:-vim} + "${NOTE_DIR}/${file}"
        ;;
      "-wj")
        local file="w-journal-$(date +%Y).md"
        echo "\n## $(date +%c)" >> "${NOTE_DIR}/${file}"
        ${EDITOR:-vim} + "${NOTE_DIR}/${file}"
        ;;
      "-p")
        local file
        file=$(fd . "${NOTE_DIR}"/pocket | fzf  \
            --multi \
            --select-1 \
            --exit-0 \
            --exact \
            --preview="bat --color=always --language Markdown {}" \
            --preview-window=right:60%:wrap)
        [[ -n $file ]] && \
          ${EDITOR:-vim} + "${NOTE_DIR}/${file}"
        ;;
      "--archive")
        local file
        file=$(fd . "${NOTE_DIR}" -e md --exec-batch ls -t {} | \
          sed -e "s|${NOTE_DIR}/||" | \
          sed -e 's/\.md$//' | \
          fzf \
            --multi \
            --select-1 \
            --exit-0 \
            --preview="bat --color=always ${NOTE_DIR}/{}.md" \
            --preview-window=right:80%:wrap)
        [[ -n $file ]] && \
          ${EDITOR:-vim} + "${NOTE_DIR}/${file}.md"
        ;;
      "-s")
        local file
        local files
        if [ -z "$2" ]; then
          echo "no search string supplied"
        else
          file=$(rg --files-with-matches --no-messages --ignore-case --type markdown --max-depth 1 --sortr modified "$2" "${NOTE_DIR}" | \
            sed -e "s|${NOTE_DIR}/||" | \
            sed -e 's/\.md$//' | \
            fzf \
              -i \
              --exact \
              --multi \
              --select-1 \
              --exit-0 \
              --preview "highlight -O ansi -l {} 2> /dev/null | rg --colors 'match:bg:yellow' --ignore-case --pretty --context 10 '$2' || rg --ignore-case --pretty --context 10 '$2' ${NOTE_DIR}/{}.md" \
              --preview-window=right:80%:wrap | \
              awk -F: '{print $1}')
        fi
        [[ -n $file ]] && \
          ${EDITOR:-vim} "${NOTE_DIR}"/"${file}".md
        ;;
      "-sm")
        local file
        local files
        if [ -z "$2" ]; then
          echo "no search string supplied"
        else
          file=$(agpatterns "${NOTE_DIR}" "${@:2}" | \
            sed -e "s|${NOTE_DIR}/||" | \
            sed -e 's/\.md$//' | \
            fzf \
              -i \
              --exact \
              --multi \
              --select-1 \
              --exit-0 \
              --preview "highlight -O ansi -l {} 2> /dev/null | rg --colors 'match:bg:yellow' --ignore-case --pretty --context 10 '$2' || rg --ignore-case --pretty --context 10 '$2' ${NOTE_DIR}/{}.md" \
              --preview-window=right:80%:wrap | \
              awk -F: '{print $1}')
        fi
        [[ -n $file ]] && \
          ${EDITOR:-vim} "${NOTE_DIR}"/"${file}".md
        ;;
      "-sa")
        local file
        local files
        if [ -z "$2" ]; then
          echo "no search string supplied"
        else
          file=$(rg --files-with-matches --no-messages --sortr --ignore-case modified "$2" "${NOTE_DIR}" | \
            sed -e "s|${NOTE_DIR}/||" | \
            sed -e 's/\.md$//' | \
            fzf \
              -i \
              --exact \
              --multi \
              --select-1 \
              --exit-0 \
              --preview "highlight -O ansi -l {} 2> /dev/null | rg --colors 'match:bg:yellow' --ignore-case --pretty --context 10 '$2' || rg --ignore-case --pretty --context 10 '$2' ${NOTE_DIR}/{}.md" \
              --preview-window=right:80%:wrap | \
              awk -F: '{print $1}')
        fi
        [[ -n $file ]] && \
          ${EDITOR:-vim} "${NOTE_DIR}"/"${file}".md
        ;;
      *)
        ${EDITOR:-vim} + "${NOTE_DIR}"/"$1".md
        ;;
    esac
  fi
}
complete -F _n note

# Override Z for use with fzf
unalias z 2> /dev/null
z() {
  if [[ -z "$*" ]]; then
    cd "$(_z -l 2>&1 | fzf +s --tac | sed 's/^[0-9,.]* *//')"
  else
    _z "$@"
  fi
}

# find todo notes in current project
function todos {
  LOCAL_DIR=$(git rev-parse --show-toplevel 2> /dev/null)
  LOCAL_DIR=${LOCAL_DIR:-.}
  if [ $# -eq 0 ]; then
    ag '(\bTODO\b|\bFIX(ME)?\b|\bREFACTOR\b)' ${LOCAL_DIR}
  else
    ag ${*:1} '(\bTODO\b|\bFIX(ME)?\b|\bREFACTOR\b)' ${LOCAL_DIR}
  fi
}

# git ignore
function gi() { curl -sLw "\n" https://www.gitignore.io/api/$@ ;}

# create html from markdown in GitHub CSS
function mdhtml {
  FILE="$1"
  pandoc "$1" --to=html5 --css=${HOME}/dotfiles/support/github.css --highlight-style=haddock  --self-contained --output "${FILE%%.*}".html
}

fix_mosh_server() {
  local fw='/usr/libexec/ApplicationFirewall/socketfilterfw'
  local mosh_sym="$(which mosh-server)"
  local mosh_abs="$(greadlink -f $mosh_sym)"

  sudo "$fw" --setglobalstate off
  sudo "$fw" --add "$mosh_sym"
  sudo "$fw" --unblockapp "$mosh_sym"
  sudo "$fw" --add "$mosh_abs"
  sudo "$fw" --unblockapp "$mosh_abs"
  sudo "$fw" --setglobalstate on
}

bwget() {
  if hash bw 2>/dev/null; then
    bw get item "$(bw list items | jq '.[] | "\(.name) | username: \(.login.username) | id: \(.id)" ' | fzf-tmux | awk '{print $(NF -0)}' | sed 's/\"//g')" | jq '.login.password' | sed 's/\"//g' | pbcopy
  fi
}

bwcopy() {
        bw get password "$1" | pbcopy
}

epoch() {
if [[ $OSTYPE =~ "darwin" ]]; then
  date -r $1  +'%d-%m-%Y %H:%M:%S%z (%Z)'
else
  date -d @$1 +'%d-%m-%Y %H:%M:%S%z (%Z)'
fi
}

# requires ffmpeg and gifsicle
video2gif() {
  input="$1"
  frame_rate=${2:-10}
  optimize_level=${3:-3}
  fit=${4:-1280x720}
  ffmpeg -i ${input} -pix_fmt rgb8 -r $frame_rate ${input%%.*}.gif && gifsicle -O$optimize_level --resize-fit $fit ${input%%.*}.gif --output ${input%%.*}.gif
}

# switch OpenJDK version: https://github.com/AdoptOpenJDK/homebrew-openjdk
jdk() {
  version=$1
  export JAVA_HOME=$(/usr/libexec/java_home -v"$version");
  java -version
 }

# ag find and replace **in place**
agsed() {
  echo "Find '$1' and replace '$2'"
  arg="s|${1}|${2}|g"
if [[ $OSTYPE =~ "darwin" ]]; then
  ag -0 -l $1 | xargs -t -0 gsed -Ei -e $arg
else
  ag -0 -l $1 | xargs -t -0 sed -Ei -e $arg
fi
}

# run ag recuresively with multiple patterns
agpatterns() {
  # a--sortr modified g -li $1 ${3:-$NOTE_DIR} | xargs ag -i $2
  flags="--sortr modified --ignore-case --no-messages --files-with-matches"
  files="rg $flags -l '$2' '$1'"

  # recuresively call xargs with words, escaping path
  for word in ${@:3}
  do
    files="$files | sed -e 's/\"/\"\\\"\"/g' -e 's/.*/\"&\"/' | xargs rg $flags -l '$word'"
  done

  eval $files
}

yubissh() {
  export GPG_TTY="$(tty)"
  export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
  gpg-connect-agent updatestartuptty /bye > /dev/null
  gpgconf --launch gpg-agent
}

bwsession() {
    BW_STATUS=$(bw status | jq -r .status)
    case "$BW_STATUS" in
    "unauthenticated")
        echo "Logging into BitWarden"
        export BW_SESSION=$(bw login --raw)
        ;;
    "locked")
        echo "Unlocking Vault"
        export BW_SESSION=$(bw unlock --raw)
        ;;
    "unlocked")
        echo "Vault is unlocked"
        ;;
    *)
        echo "Unknown Login Status: $BW_STATUS"
        return 1
        ;;
    esac
    bw sync
}

# Opens web browser with URL of git remote repository
gremote ()
{
    local remote=`git remote -v | head -n 1`
    if [[ $remote =~ 'https' ]];
    then
        local repoUrl=`echo $remote | awk -F " " '{print $2}' | sed 's/\\.git//g'`
    else
        local repoUrl=`echo $remote | awk -F "@" '{print $2}' | awk -F " " '{print $1}' | sed 's/:/\\//g' | sed 's/.git//g' | awk '{print "https://"$1}'`
    fi
    echo "Opening $repoUrl"
    open $repoUrl
}
